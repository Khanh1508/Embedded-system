
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000082c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009c4  080009c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009c4  080009c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080009c4  080009c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009c4  080009c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009c4  080009c4  000109c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009c8  080009c8  000109c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080009cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080009d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080009d8  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c82  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b35  00000000  00000000  00022cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  000237f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002e0  00000000  00000000  00023b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014120  00000000  00000000  00023e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ba0  00000000  00000000  00037f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eb19  00000000  00000000  0003baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b68  00000000  00000000  000ba65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080009ac 	.word	0x080009ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080009ac 	.word	0x080009ac

080001d8 <main>:
//bootloader
#include "main.h"
static void MX_GPIO_Init(void);
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
    HAL_Init();
 80001de:	f000 f8d9 	bl	8000394 <HAL_Init>
    MX_GPIO_Init();
 80001e2:	f000 f81d 	bl	8000220 <MX_GPIO_Init>
    uint32_t* reset_pos=0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]

    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 80001ea:	2101      	movs	r1, #1
 80001ec:	4809      	ldr	r0, [pc, #36]	; (8000214 <main+0x3c>)
 80001ee:	f000 fba1 	bl	8000934 <HAL_GPIO_ReadPin>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d102      	bne.n	80001fe <main+0x26>
        reset_pos=(uint32_t*)0x08004004;
 80001f8:	4b07      	ldr	r3, [pc, #28]	; (8000218 <main+0x40>)
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	e001      	b.n	8000202 <main+0x2a>
    else
    	reset_pos=(uint32_t*)0x08008004;
 80001fe:	4b07      	ldr	r3, [pc, #28]	; (800021c <main+0x44>)
 8000200:	60fb      	str	r3, [r7, #12]

    uint32_t reset_handler_app1=*reset_pos;
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	60bb      	str	r3, [r7, #8]
    void(*reset_app1)()=reset_handler_app1;
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	607b      	str	r3, [r7, #4]
    reset_app1();
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4798      	blx	r3
  while (1)
 8000210:	e7fe      	b.n	8000210 <main+0x38>
 8000212:	bf00      	nop
 8000214:	40020000 	.word	0x40020000
 8000218:	08004004 	.word	0x08004004
 800021c:	08008004 	.word	0x08008004

08000220 <MX_GPIO_Init>:
  	  {

  	  }
}
static void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000234:	2300      	movs	r3, #0
 8000236:	603b      	str	r3, [r7, #0]
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <MX_GPIO_Init+0x50>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023c:	4a0c      	ldr	r2, [pc, #48]	; (8000270 <MX_GPIO_Init+0x50>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6313      	str	r3, [r2, #48]	; 0x30
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <MX_GPIO_Init+0x50>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	603b      	str	r3, [r7, #0]
 800024e:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000250:	2301      	movs	r3, #1
 8000252:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000254:	2300      	movs	r3, #0
 8000256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	4619      	mov	r1, r3
 8000260:	4804      	ldr	r0, [pc, #16]	; (8000274 <MX_GPIO_Init+0x54>)
 8000262:	f000 f9e3 	bl	800062c <HAL_GPIO_Init>
}
 8000266:	bf00      	nop
 8000268:	3718      	adds	r7, #24
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40023800 	.word	0x40023800
 8000274:	40020000 	.word	0x40020000

08000278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <HAL_MspInit+0x4c>)
 8000284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000286:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <HAL_MspInit+0x4c>)
 8000288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800028c:	6453      	str	r3, [r2, #68]	; 0x44
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <HAL_MspInit+0x4c>)
 8000290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800029a:	2300      	movs	r3, #0
 800029c:	603b      	str	r3, [r7, #0]
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <HAL_MspInit+0x4c>)
 80002a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a2:	4a08      	ldr	r2, [pc, #32]	; (80002c4 <HAL_MspInit+0x4c>)
 80002a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002a8:	6413      	str	r3, [r2, #64]	; 0x40
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_MspInit+0x4c>)
 80002ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002b2:	603b      	str	r3, [r7, #0]
 80002b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80002b6:	2007      	movs	r0, #7
 80002b8:	f000 f984 	bl	80005c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40023800 	.word	0x40023800

080002c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <NMI_Handler+0x4>

080002ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ce:	b480      	push	{r7}
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <HardFault_Handler+0x4>

080002d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <MemManage_Handler+0x4>

080002da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002de:	e7fe      	b.n	80002de <BusFault_Handler+0x4>

080002e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <UsageFault_Handler+0x4>

080002e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000314:	f000 f890 	bl	8000438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}

0800031c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <SystemInit+0x20>)
 8000322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000326:	4a05      	ldr	r2, [pc, #20]	; (800033c <SystemInit+0x20>)
 8000328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800032c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000378 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000346:	490e      	ldr	r1, [pc, #56]	; (8000380 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000348:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800035c:	4c0b      	ldr	r4, [pc, #44]	; (800038c <LoopFillZerobss+0x26>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800036a:	f7ff ffd7 	bl	800031c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800036e:	f000 faf9 	bl	8000964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000372:	f7ff ff31 	bl	80001d8 <main>
  bx  lr    
 8000376:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000384:	080009cc 	.word	0x080009cc
  ldr r2, =_sbss
 8000388:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800038c:	2000002c 	.word	0x2000002c

08000390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>
	...

08000394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <HAL_Init+0x40>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <HAL_Init+0x40>)
 800039e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80003a4:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <HAL_Init+0x40>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <HAL_Init+0x40>)
 80003aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003b0:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <HAL_Init+0x40>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <HAL_Init+0x40>)
 80003b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003bc:	2003      	movs	r0, #3
 80003be:	f000 f901 	bl	80005c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 f808 	bl	80003d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003c8:	f7ff ff56 	bl	8000278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003cc:	2300      	movs	r3, #0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40023c00 	.word	0x40023c00

080003d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <HAL_InitTick+0x54>)
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	4b12      	ldr	r3, [pc, #72]	; (8000430 <HAL_InitTick+0x58>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	4619      	mov	r1, r3
 80003ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80003f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 f90b 	bl	8000612 <HAL_SYSTICK_Config>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000402:	2301      	movs	r3, #1
 8000404:	e00e      	b.n	8000424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2b0f      	cmp	r3, #15
 800040a:	d80a      	bhi.n	8000422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800040c:	2200      	movs	r2, #0
 800040e:	6879      	ldr	r1, [r7, #4]
 8000410:	f04f 30ff 	mov.w	r0, #4294967295
 8000414:	f000 f8e1 	bl	80005da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000418:	4a06      	ldr	r2, [pc, #24]	; (8000434 <HAL_InitTick+0x5c>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800041e:	2300      	movs	r3, #0
 8000420:	e000      	b.n	8000424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000422:	2301      	movs	r3, #1
}
 8000424:	4618      	mov	r0, r3
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000000 	.word	0x20000000
 8000430:	20000008 	.word	0x20000008
 8000434:	20000004 	.word	0x20000004

08000438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <HAL_IncTick+0x20>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	461a      	mov	r2, r3
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <HAL_IncTick+0x24>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4413      	add	r3, r2
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_IncTick+0x24>)
 800044a:	6013      	str	r3, [r2, #0]
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000008 	.word	0x20000008
 800045c:	20000028 	.word	0x20000028

08000460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f003 0307 	and.w	r3, r3, #7
 800046e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800047c:	4013      	ands	r3, r2
 800047e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800048c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000492:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	60d3      	str	r3, [r2, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <__NVIC_GetPriorityGrouping+0x18>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	0a1b      	lsrs	r3, r3, #8
 80004b2:	f003 0307 	and.w	r3, r3, #7
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	6039      	str	r1, [r7, #0]
 80004ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	db0a      	blt.n	80004ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	490c      	ldr	r1, [pc, #48]	; (8000510 <__NVIC_SetPriority+0x4c>)
 80004de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e2:	0112      	lsls	r2, r2, #4
 80004e4:	b2d2      	uxtb	r2, r2
 80004e6:	440b      	add	r3, r1
 80004e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004ec:	e00a      	b.n	8000504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4908      	ldr	r1, [pc, #32]	; (8000514 <__NVIC_SetPriority+0x50>)
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	f003 030f 	and.w	r3, r3, #15
 80004fa:	3b04      	subs	r3, #4
 80004fc:	0112      	lsls	r2, r2, #4
 80004fe:	b2d2      	uxtb	r2, r2
 8000500:	440b      	add	r3, r1
 8000502:	761a      	strb	r2, [r3, #24]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	e000e100 	.word	0xe000e100
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000518:	b480      	push	{r7}
 800051a:	b089      	sub	sp, #36	; 0x24
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	f1c3 0307 	rsb	r3, r3, #7
 8000532:	2b04      	cmp	r3, #4
 8000534:	bf28      	it	cs
 8000536:	2304      	movcs	r3, #4
 8000538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	3304      	adds	r3, #4
 800053e:	2b06      	cmp	r3, #6
 8000540:	d902      	bls.n	8000548 <NVIC_EncodePriority+0x30>
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	3b03      	subs	r3, #3
 8000546:	e000      	b.n	800054a <NVIC_EncodePriority+0x32>
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800054c:	f04f 32ff 	mov.w	r2, #4294967295
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	43da      	mvns	r2, r3
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	401a      	ands	r2, r3
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000560:	f04f 31ff 	mov.w	r1, #4294967295
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	43d9      	mvns	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000570:	4313      	orrs	r3, r2
         );
}
 8000572:	4618      	mov	r0, r3
 8000574:	3724      	adds	r7, #36	; 0x24
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3b01      	subs	r3, #1
 800058c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000590:	d301      	bcc.n	8000596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000592:	2301      	movs	r3, #1
 8000594:	e00f      	b.n	80005b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <SysTick_Config+0x40>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3b01      	subs	r3, #1
 800059c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800059e:	210f      	movs	r1, #15
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f7ff ff8e 	bl	80004c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <SysTick_Config+0x40>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ae:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <SysTick_Config+0x40>)
 80005b0:	2207      	movs	r2, #7
 80005b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	e000e010 	.word	0xe000e010

080005c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ff47 	bl	8000460 <__NVIC_SetPriorityGrouping>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
 80005e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005ec:	f7ff ff5c 	bl	80004a8 <__NVIC_GetPriorityGrouping>
 80005f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	68b9      	ldr	r1, [r7, #8]
 80005f6:	6978      	ldr	r0, [r7, #20]
 80005f8:	f7ff ff8e 	bl	8000518 <NVIC_EncodePriority>
 80005fc:	4602      	mov	r2, r0
 80005fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000602:	4611      	mov	r1, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff5d 	bl	80004c4 <__NVIC_SetPriority>
}
 800060a:	bf00      	nop
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ffb0 	bl	8000580 <SysTick_Config>
 8000620:	4603      	mov	r3, r0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800062c:	b480      	push	{r7}
 800062e:	b089      	sub	sp, #36	; 0x24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
 8000646:	e159      	b.n	80008fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000648:	2201      	movs	r2, #1
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	fa02 f303 	lsl.w	r3, r2, r3
 8000650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	4013      	ands	r3, r2
 800065a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	429a      	cmp	r2, r3
 8000662:	f040 8148 	bne.w	80008f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f003 0303 	and.w	r3, r3, #3
 800066e:	2b01      	cmp	r3, #1
 8000670:	d005      	beq.n	800067e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800067a:	2b02      	cmp	r3, #2
 800067c:	d130      	bne.n	80006e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	2203      	movs	r2, #3
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43db      	mvns	r3, r3
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	4013      	ands	r3, r2
 8000694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	68da      	ldr	r2, [r3, #12]
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	69ba      	ldr	r2, [r7, #24]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	69ba      	ldr	r2, [r7, #24]
 80006ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006b4:	2201      	movs	r2, #1
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	69ba      	ldr	r2, [r7, #24]
 80006c0:	4013      	ands	r3, r2
 80006c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	091b      	lsrs	r3, r3, #4
 80006ca:	f003 0201 	and.w	r2, r3, #1
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	69ba      	ldr	r2, [r7, #24]
 80006de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f003 0303 	and.w	r3, r3, #3
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d017      	beq.n	800071c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	2203      	movs	r2, #3
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	69ba      	ldr	r2, [r7, #24]
 8000700:	4013      	ands	r3, r2
 8000702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	69ba      	ldr	r2, [r7, #24]
 8000712:	4313      	orrs	r3, r2
 8000714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	69ba      	ldr	r2, [r7, #24]
 800071a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f003 0303 	and.w	r3, r3, #3
 8000724:	2b02      	cmp	r3, #2
 8000726:	d123      	bne.n	8000770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	08da      	lsrs	r2, r3, #3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3208      	adds	r2, #8
 8000730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	f003 0307 	and.w	r3, r3, #7
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	220f      	movs	r2, #15
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	43db      	mvns	r3, r3
 8000746:	69ba      	ldr	r2, [r7, #24]
 8000748:	4013      	ands	r3, r2
 800074a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	691a      	ldr	r2, [r3, #16]
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	69ba      	ldr	r2, [r7, #24]
 800075e:	4313      	orrs	r3, r2
 8000760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	08da      	lsrs	r2, r3, #3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3208      	adds	r2, #8
 800076a:	69b9      	ldr	r1, [r7, #24]
 800076c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	2203      	movs	r2, #3
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	69ba      	ldr	r2, [r7, #24]
 8000784:	4013      	ands	r3, r2
 8000786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f003 0203 	and.w	r2, r3, #3
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	69ba      	ldr	r2, [r7, #24]
 800079a:	4313      	orrs	r3, r2
 800079c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	69ba      	ldr	r2, [r7, #24]
 80007a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	f000 80a2 	beq.w	80008f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b57      	ldr	r3, [pc, #348]	; (8000914 <HAL_GPIO_Init+0x2e8>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	4a56      	ldr	r2, [pc, #344]	; (8000914 <HAL_GPIO_Init+0x2e8>)
 80007bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c0:	6453      	str	r3, [r2, #68]	; 0x44
 80007c2:	4b54      	ldr	r3, [pc, #336]	; (8000914 <HAL_GPIO_Init+0x2e8>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80007ce:	4a52      	ldr	r2, [pc, #328]	; (8000918 <HAL_GPIO_Init+0x2ec>)
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	3302      	adds	r3, #2
 80007d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f003 0303 	and.w	r3, r3, #3
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	220f      	movs	r2, #15
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43db      	mvns	r3, r3
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	4013      	ands	r3, r2
 80007f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a49      	ldr	r2, [pc, #292]	; (800091c <HAL_GPIO_Init+0x2f0>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d019      	beq.n	800082e <HAL_GPIO_Init+0x202>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a48      	ldr	r2, [pc, #288]	; (8000920 <HAL_GPIO_Init+0x2f4>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d013      	beq.n	800082a <HAL_GPIO_Init+0x1fe>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a47      	ldr	r2, [pc, #284]	; (8000924 <HAL_GPIO_Init+0x2f8>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d00d      	beq.n	8000826 <HAL_GPIO_Init+0x1fa>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a46      	ldr	r2, [pc, #280]	; (8000928 <HAL_GPIO_Init+0x2fc>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d007      	beq.n	8000822 <HAL_GPIO_Init+0x1f6>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a45      	ldr	r2, [pc, #276]	; (800092c <HAL_GPIO_Init+0x300>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d101      	bne.n	800081e <HAL_GPIO_Init+0x1f2>
 800081a:	2304      	movs	r3, #4
 800081c:	e008      	b.n	8000830 <HAL_GPIO_Init+0x204>
 800081e:	2307      	movs	r3, #7
 8000820:	e006      	b.n	8000830 <HAL_GPIO_Init+0x204>
 8000822:	2303      	movs	r3, #3
 8000824:	e004      	b.n	8000830 <HAL_GPIO_Init+0x204>
 8000826:	2302      	movs	r3, #2
 8000828:	e002      	b.n	8000830 <HAL_GPIO_Init+0x204>
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <HAL_GPIO_Init+0x204>
 800082e:	2300      	movs	r3, #0
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	f002 0203 	and.w	r2, r2, #3
 8000836:	0092      	lsls	r2, r2, #2
 8000838:	4093      	lsls	r3, r2
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	4313      	orrs	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000840:	4935      	ldr	r1, [pc, #212]	; (8000918 <HAL_GPIO_Init+0x2ec>)
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	089b      	lsrs	r3, r3, #2
 8000846:	3302      	adds	r3, #2
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800084e:	4b38      	ldr	r3, [pc, #224]	; (8000930 <HAL_GPIO_Init+0x304>)
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	43db      	mvns	r3, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4013      	ands	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000872:	4a2f      	ldr	r2, [pc, #188]	; (8000930 <HAL_GPIO_Init+0x304>)
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000878:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <HAL_GPIO_Init+0x304>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	43db      	mvns	r3, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4013      	ands	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	4313      	orrs	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800089c:	4a24      	ldr	r2, [pc, #144]	; (8000930 <HAL_GPIO_Init+0x304>)
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <HAL_GPIO_Init+0x304>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4013      	ands	r3, r2
 80008b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d003      	beq.n	80008c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80008c6:	4a1a      	ldr	r2, [pc, #104]	; (8000930 <HAL_GPIO_Init+0x304>)
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_GPIO_Init+0x304>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	43db      	mvns	r3, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4013      	ands	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d003      	beq.n	80008f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_GPIO_Init+0x304>)
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3301      	adds	r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	f67f aea2 	bls.w	8000648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3724      	adds	r7, #36	; 0x24
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40013800 	.word	0x40013800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020400 	.word	0x40020400
 8000924:	40020800 	.word	0x40020800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40021000 	.word	0x40021000
 8000930:	40013c00 	.word	0x40013c00

08000934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	691a      	ldr	r2, [r3, #16]
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	4013      	ands	r3, r2
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800094c:	2301      	movs	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	e001      	b.n	8000956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <__libc_init_array>:
 8000964:	b570      	push	{r4, r5, r6, lr}
 8000966:	4d0d      	ldr	r5, [pc, #52]	; (800099c <__libc_init_array+0x38>)
 8000968:	4c0d      	ldr	r4, [pc, #52]	; (80009a0 <__libc_init_array+0x3c>)
 800096a:	1b64      	subs	r4, r4, r5
 800096c:	10a4      	asrs	r4, r4, #2
 800096e:	2600      	movs	r6, #0
 8000970:	42a6      	cmp	r6, r4
 8000972:	d109      	bne.n	8000988 <__libc_init_array+0x24>
 8000974:	4d0b      	ldr	r5, [pc, #44]	; (80009a4 <__libc_init_array+0x40>)
 8000976:	4c0c      	ldr	r4, [pc, #48]	; (80009a8 <__libc_init_array+0x44>)
 8000978:	f000 f818 	bl	80009ac <_init>
 800097c:	1b64      	subs	r4, r4, r5
 800097e:	10a4      	asrs	r4, r4, #2
 8000980:	2600      	movs	r6, #0
 8000982:	42a6      	cmp	r6, r4
 8000984:	d105      	bne.n	8000992 <__libc_init_array+0x2e>
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f855 3b04 	ldr.w	r3, [r5], #4
 800098c:	4798      	blx	r3
 800098e:	3601      	adds	r6, #1
 8000990:	e7ee      	b.n	8000970 <__libc_init_array+0xc>
 8000992:	f855 3b04 	ldr.w	r3, [r5], #4
 8000996:	4798      	blx	r3
 8000998:	3601      	adds	r6, #1
 800099a:	e7f2      	b.n	8000982 <__libc_init_array+0x1e>
 800099c:	080009c4 	.word	0x080009c4
 80009a0:	080009c4 	.word	0x080009c4
 80009a4:	080009c4 	.word	0x080009c4
 80009a8:	080009c8 	.word	0x080009c8

080009ac <_init>:
 80009ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ae:	bf00      	nop
 80009b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b2:	bc08      	pop	{r3}
 80009b4:	469e      	mov	lr, r3
 80009b6:	4770      	bx	lr

080009b8 <_fini>:
 80009b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ba:	bf00      	nop
 80009bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009be:	bc08      	pop	{r3}
 80009c0:	469e      	mov	lr, r3
 80009c2:	4770      	bx	lr

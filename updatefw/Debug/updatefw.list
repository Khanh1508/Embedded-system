
updatefw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002958  08002958  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002960  08002960  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08002968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000b44  200001a0  08002b08  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ce4  08002b08  00020ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086f3  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001604  00000000  00000000  000288c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00029ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001495a  00000000  00000000  0002abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000843b  00000000  00000000  0003f52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081a5a  00000000  00000000  00047965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c93bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a88  00000000  00000000  000c9410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a0 	.word	0x200001a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002924 	.word	0x08002924

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001a4 	.word	0x200001a4
 80001d4:	08002924 	.word	0x08002924

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
	uint32_t* AIRCR=(uint32_t*)(0XE000ED0C);
	*AIRCR =(0x5fa<<16) | (1<<2); //Reset chip
}

int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

  HAL_Init();
 80004e0:	f000 f9b2 	bl	8000848 <HAL_Init>
  //SystemClock_Config();
  MX_GPIO_Init();
 80004e4:	f000 f862 	bl	80005ac <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 f840 	bl	800056c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f814 	bl	8000518 <MX_USART2_UART_Init>
  HAL_UART_Receive_DMA(&huart2,new_fw,sizeof(new_fw));
 80004f0:	f640 227c 	movw	r2, #2684	; 0xa7c
 80004f4:	4905      	ldr	r1, [pc, #20]	; (800050c <main+0x30>)
 80004f6:	4806      	ldr	r0, [pc, #24]	; (8000510 <main+0x34>)
 80004f8:	f001 f931 	bl	800175e <HAL_UART_Receive_DMA>
  while(recv_fw_done !=1);
 80004fc:	bf00      	nop
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <main+0x38>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d1fb      	bne.n	80004fe <main+0x22>
  update_fw();
 8000506:	f002 fa1b 	bl	8002940 <__update_fw_veneer>
  while (1)
 800050a:	e7fe      	b.n	800050a <main+0x2e>
 800050c:	20000260 	.word	0x20000260
 8000510:	200001bc 	.word	0x200001bc
 8000514:	20000cdc 	.word	0x20000cdc

08000518 <MX_USART2_UART_Init>:
//    Error_Handler();
//  }
//}

static void MX_USART2_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_USART2_UART_Init+0x4c>)
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <MX_USART2_UART_Init+0x50>)
 8000520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_USART2_UART_Init+0x4c>)
 8000524:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_USART2_UART_Init+0x4c>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_USART2_UART_Init+0x4c>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_USART2_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_USART2_UART_Init+0x4c>)
 800053e:	220c      	movs	r2, #12
 8000540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MX_USART2_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_USART2_UART_Init+0x4c>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_USART2_UART_Init+0x4c>)
 8000550:	f001 f8b8 	bl	80016c4 <HAL_UART_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800055a:	f000 f841 	bl	80005e0 <Error_Handler>
  }

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200001bc 	.word	0x200001bc
 8000568:	40004400 	.word	0x40004400

0800056c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_DMA_Init+0x3c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <MX_DMA_Init+0x3c>)
 800057c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_DMA_Init+0x3c>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	2010      	movs	r0, #16
 8000594:	f000 faa5 	bl	8000ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000598:	2010      	movs	r0, #16
 800059a:	f000 fabe 	bl	8000b1a <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800

080005ac <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_GPIO_Init+0x30>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a08      	ldr	r2, [pc, #32]	; (80005dc <MX_GPIO_Init+0x30>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_GPIO_Init+0x30>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800

080005e0 <Error_Handler>:

void Error_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <Error_Handler+0x8>
	...

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <HAL_MspInit+0x4c>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <HAL_MspInit+0x4c>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <HAL_MspInit+0x4c>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_MspInit+0x4c>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <HAL_MspInit+0x4c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	6413      	str	r3, [r2, #64]	; 0x40
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_MspInit+0x4c>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800

0800063c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a34      	ldr	r2, [pc, #208]	; (800072c <HAL_UART_MspInit+0xf0>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d161      	bne.n	8000722 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	4b33      	ldr	r3, [pc, #204]	; (8000730 <HAL_UART_MspInit+0xf4>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	4a32      	ldr	r2, [pc, #200]	; (8000730 <HAL_UART_MspInit+0xf4>)
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	6413      	str	r3, [r2, #64]	; 0x40
 800066e:	4b30      	ldr	r3, [pc, #192]	; (8000730 <HAL_UART_MspInit+0xf4>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <HAL_UART_MspInit+0xf4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a2b      	ldr	r2, [pc, #172]	; (8000730 <HAL_UART_MspInit+0xf4>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <HAL_UART_MspInit+0xf4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000696:	230c      	movs	r3, #12
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006a6:	2307      	movs	r3, #7
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	4820      	ldr	r0, [pc, #128]	; (8000734 <HAL_UART_MspInit+0xf8>)
 80006b2:	f000 fe4f 	bl	8001354 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <HAL_UART_MspInit+0xfc>)
 80006b8:	4a20      	ldr	r2, [pc, #128]	; (800073c <HAL_UART_MspInit+0x100>)
 80006ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <HAL_UART_MspInit+0xfc>)
 80006be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <HAL_UART_MspInit+0xfc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <HAL_UART_MspInit+0xfc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <HAL_UART_MspInit+0xfc>)
 80006d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HAL_UART_MspInit+0xfc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <HAL_UART_MspInit+0xfc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <HAL_UART_MspInit+0xfc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <HAL_UART_MspInit+0xfc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_UART_MspInit+0xfc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80006f6:	4810      	ldr	r0, [pc, #64]	; (8000738 <HAL_UART_MspInit+0xfc>)
 80006f8:	f000 fa2a 	bl	8000b50 <HAL_DMA_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000702:	f7ff ff6d 	bl	80005e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <HAL_UART_MspInit+0xfc>)
 800070a:	639a      	str	r2, [r3, #56]	; 0x38
 800070c:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_UART_MspInit+0xfc>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	2026      	movs	r0, #38	; 0x26
 8000718:	f000 f9e3 	bl	8000ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800071c:	2026      	movs	r0, #38	; 0x26
 800071e:	f000 f9fc 	bl	8000b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000722:	bf00      	nop
 8000724:	3728      	adds	r7, #40	; 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40004400 	.word	0x40004400
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000
 8000738:	20000200 	.word	0x20000200
 800073c:	40026088 	.word	0x40026088

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <NMI_Handler+0x4>

08000746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <MemManage_Handler+0x4>

08000752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <UsageFault_Handler+0x4>

0800075e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078c:	f000 f8ae 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
if(__HAL_DMA_GET_COUNTER(&hdma_usart2_rx)==0)
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <DMA1_Stream5_IRQHandler+0x20>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <DMA1_Stream5_IRQHandler+0x14>
{
	recv_fw_done=1;
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <DMA1_Stream5_IRQHandler+0x24>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
//	__asm("NOP");
}
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <DMA1_Stream5_IRQHandler+0x20>)
 80007aa:	f000 fb69 	bl	8000e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000200 	.word	0x20000200
 80007b8:	20000cdc 	.word	0x20000cdc

080007bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <USART2_IRQHandler+0x10>)
 80007c2:	f000 fffd 	bl	80017c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200001bc 	.word	0x200001bc

080007d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <SystemInit+0x20>)
 80007d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <SystemInit+0x20>)
 80007dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800082c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007fa:	490e      	ldr	r1, [pc, #56]	; (8000834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000810:	4c0b      	ldr	r4, [pc, #44]	; (8000840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800081e:	f7ff ffd7 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f002 f85b 	bl	80028dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000826:	f7ff fe59 	bl	80004dc <main>
  bx  lr    
 800082a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800082c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8000838:	08002968 	.word	0x08002968
  ldr r2, =_sbss
 800083c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000840:	20000ce4 	.word	0x20000ce4

08000844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC_IRQHandler>
	...

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_Init+0x40>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <HAL_Init+0x40>)
 8000852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_Init+0x40>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_Init+0x40>)
 800085e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_Init+0x40>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <HAL_Init+0x40>)
 800086a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f000 f92b 	bl	8000acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000876:	200f      	movs	r0, #15
 8000878:	f000 f808 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087c:	f7ff feb6 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023c00 	.word	0x40023c00

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x54>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x58>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f943 	bl	8000b36 <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 f90b 	bl	8000ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_InitTick+0x5c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x20>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x24>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_IncTick+0x24>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008
 8000910:	20000ce0 	.word	0x20000ce0

08000914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_GetTick+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000ce0 	.word	0x20000ce0

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db0b      	blt.n	80009ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	4907      	ldr	r1, [pc, #28]	; (80009c8 <__NVIC_EnableIRQ+0x38>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	2001      	movs	r0, #1
 80009b2:	fa00 f202 	lsl.w	r2, r0, r2
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
         );
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a98:	d301      	bcc.n	8000a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00f      	b.n	8000abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <SysTick_Config+0x40>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f7ff ff8e 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff29 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af4:	f7ff ff3e 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	6978      	ldr	r0, [r7, #20]
 8000b00:	f7ff ff8e 	bl	8000a20 <NVIC_EncodePriority>
 8000b04:	4602      	mov	r2, r0
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff5d 	bl	80009cc <__NVIC_SetPriority>
}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff31 	bl	8000990 <__NVIC_EnableIRQ>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffa2 	bl	8000a88 <SysTick_Config>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff feda 	bl	8000914 <HAL_GetTick>
 8000b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e099      	b.n	8000ca0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2202      	movs	r2, #2
 8000b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f022 0201 	bic.w	r2, r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b8c:	e00f      	b.n	8000bae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b8e:	f7ff fec1 	bl	8000914 <HAL_GetTick>
 8000b92:	4602      	mov	r2, r0
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	2b05      	cmp	r3, #5
 8000b9a:	d908      	bls.n	8000bae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2220      	movs	r2, #32
 8000ba0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000baa:	2303      	movs	r3, #3
 8000bac:	e078      	b.n	8000ca0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1e8      	bne.n	8000b8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <HAL_DMA_Init+0x158>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a1b      	ldr	r3, [r3, #32]
 8000bf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d107      	bne.n	8000c18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4313      	orrs	r3, r2
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f023 0307 	bic.w	r3, r3, #7
 8000c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d117      	bne.n	8000c72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d00e      	beq.n	8000c72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 fb01 	bl	800125c <DMA_CheckFifoParam>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d008      	beq.n	8000c72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2240      	movs	r2, #64	; 0x40
 8000c64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e016      	b.n	8000ca0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 fab8 	bl	80011f0 <DMA_CalcBaseAndBitshift>
 8000c80:	4603      	mov	r3, r0
 8000c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c88:	223f      	movs	r2, #63	; 0x3f
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	f010803f 	.word	0xf010803f

08000cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <HAL_DMA_Start_IT+0x26>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e040      	b.n	8000d54 <HAL_DMA_Start_IT+0xa8>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d12f      	bne.n	8000d46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2202      	movs	r2, #2
 8000cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f000 fa4a 	bl	8001194 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d04:	223f      	movs	r2, #63	; 0x3f
 8000d06:	409a      	lsls	r2, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 0216 	orr.w	r2, r2, #22
 8000d1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d007      	beq.n	8000d34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0208 	orr.w	r2, r2, #8
 8000d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 0201 	orr.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e005      	b.n	8000d52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d6a:	f7ff fdd3 	bl	8000914 <HAL_GetTick>
 8000d6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d008      	beq.n	8000d8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e052      	b.n	8000e34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0216 	bic.w	r2, r2, #22
 8000d9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d103      	bne.n	8000dbe <HAL_DMA_Abort+0x62>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d007      	beq.n	8000dce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 0208 	bic.w	r2, r2, #8
 8000dcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0201 	bic.w	r2, r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dde:	e013      	b.n	8000e08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000de0:	f7ff fd98 	bl	8000914 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b05      	cmp	r3, #5
 8000dec:	d90c      	bls.n	8000e08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2220      	movs	r2, #32
 8000df2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2203      	movs	r2, #3
 8000df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e015      	b.n	8000e34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1e4      	bne.n	8000de0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e1a:	223f      	movs	r2, #63	; 0x3f
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d004      	beq.n	8000e5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00c      	b.n	8000e74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2205      	movs	r2, #5
 8000e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0201 	bic.w	r2, r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e8c:	4b8e      	ldr	r3, [pc, #568]	; (80010c8 <HAL_DMA_IRQHandler+0x248>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a8e      	ldr	r2, [pc, #568]	; (80010cc <HAL_DMA_IRQHandler+0x24c>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	0a9b      	lsrs	r3, r3, #10
 8000e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eaa:	2208      	movs	r2, #8
 8000eac:	409a      	lsls	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d01a      	beq.n	8000eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d013      	beq.n	8000eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0204 	bic.w	r2, r2, #4
 8000ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed8:	2208      	movs	r2, #8
 8000eda:	409a      	lsls	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee4:	f043 0201 	orr.w	r2, r3, #1
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d012      	beq.n	8000f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00b      	beq.n	8000f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f0e:	2201      	movs	r2, #1
 8000f10:	409a      	lsls	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1a:	f043 0202 	orr.w	r2, r3, #2
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f26:	2204      	movs	r2, #4
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d012      	beq.n	8000f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00b      	beq.n	8000f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f44:	2204      	movs	r2, #4
 8000f46:	409a      	lsls	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f50:	f043 0204 	orr.w	r2, r3, #4
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f5c:	2210      	movs	r2, #16
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d043      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d03c      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d018      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d108      	bne.n	8000fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d024      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	4798      	blx	r3
 8000fae:	e01f      	b.n	8000ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01b      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	4798      	blx	r3
 8000fc0:	e016      	b.n	8000ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d107      	bne.n	8000fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0208 	bic.w	r2, r2, #8
 8000fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 808f 	beq.w	8001120 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0310 	and.w	r3, r3, #16
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8087 	beq.w	8001120 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001016:	2220      	movs	r2, #32
 8001018:	409a      	lsls	r2, r3
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b05      	cmp	r3, #5
 8001028:	d136      	bne.n	8001098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0216 	bic.w	r2, r2, #22
 8001038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	695a      	ldr	r2, [r3, #20]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	2b00      	cmp	r3, #0
 8001050:	d103      	bne.n	800105a <HAL_DMA_IRQHandler+0x1da>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0208 	bic.w	r2, r2, #8
 8001068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106e:	223f      	movs	r2, #63	; 0x3f
 8001070:	409a      	lsls	r2, r3
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800108a:	2b00      	cmp	r3, #0
 800108c:	d07e      	beq.n	800118c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	4798      	blx	r3
        }
        return;
 8001096:	e079      	b.n	800118c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d01d      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10d      	bne.n	80010d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d031      	beq.n	8001120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	4798      	blx	r3
 80010c4:	e02c      	b.n	8001120 <HAL_DMA_IRQHandler+0x2a0>
 80010c6:	bf00      	nop
 80010c8:	20000000 	.word	0x20000000
 80010cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d023      	beq.n	8001120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	4798      	blx	r3
 80010e0:	e01e      	b.n	8001120 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10f      	bne.n	8001110 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0210 	bic.w	r2, r2, #16
 80010fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001124:	2b00      	cmp	r3, #0
 8001126:	d032      	beq.n	800118e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d022      	beq.n	800117a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2205      	movs	r2, #5
 8001138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3301      	adds	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	d307      	bcc.n	8001168 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f2      	bne.n	800114c <HAL_DMA_IRQHandler+0x2cc>
 8001166:	e000      	b.n	800116a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001168:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	4798      	blx	r3
 800118a:	e000      	b.n	800118e <HAL_DMA_IRQHandler+0x30e>
        return;
 800118c:	bf00      	nop
    }
  }
}
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b40      	cmp	r3, #64	; 0x40
 80011c0:	d108      	bne.n	80011d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80011d2:	e007      	b.n	80011e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	60da      	str	r2, [r3, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	3b10      	subs	r3, #16
 8001200:	4a14      	ldr	r2, [pc, #80]	; (8001254 <DMA_CalcBaseAndBitshift+0x64>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800120a:	4a13      	ldr	r2, [pc, #76]	; (8001258 <DMA_CalcBaseAndBitshift+0x68>)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d909      	bls.n	8001232 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001226:	f023 0303 	bic.w	r3, r3, #3
 800122a:	1d1a      	adds	r2, r3, #4
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	659a      	str	r2, [r3, #88]	; 0x58
 8001230:	e007      	b.n	8001242 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800123a:	f023 0303 	bic.w	r3, r3, #3
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	aaaaaaab 	.word	0xaaaaaaab
 8001258:	08002950 	.word	0x08002950

0800125c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d11f      	bne.n	80012b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2b03      	cmp	r3, #3
 800127a:	d856      	bhi.n	800132a <DMA_CheckFifoParam+0xce>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <DMA_CheckFifoParam+0x28>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	08001295 	.word	0x08001295
 8001288:	080012a7 	.word	0x080012a7
 800128c:	08001295 	.word	0x08001295
 8001290:	0800132b 	.word	0x0800132b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d046      	beq.n	800132e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012a4:	e043      	b.n	800132e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80012ae:	d140      	bne.n	8001332 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012b4:	e03d      	b.n	8001332 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012be:	d121      	bne.n	8001304 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d837      	bhi.n	8001336 <DMA_CheckFifoParam+0xda>
 80012c6:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <DMA_CheckFifoParam+0x70>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012dd 	.word	0x080012dd
 80012d0:	080012e3 	.word	0x080012e3
 80012d4:	080012dd 	.word	0x080012dd
 80012d8:	080012f5 	.word	0x080012f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
      break;
 80012e0:	e030      	b.n	8001344 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d025      	beq.n	800133a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012f2:	e022      	b.n	800133a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80012fc:	d11f      	bne.n	800133e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001302:	e01c      	b.n	800133e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d903      	bls.n	8001312 <DMA_CheckFifoParam+0xb6>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d003      	beq.n	8001318 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001310:	e018      	b.n	8001344 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	73fb      	strb	r3, [r7, #15]
      break;
 8001316:	e015      	b.n	8001344 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00e      	beq.n	8001342 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
      break;
 8001328:	e00b      	b.n	8001342 <DMA_CheckFifoParam+0xe6>
      break;
 800132a:	bf00      	nop
 800132c:	e00a      	b.n	8001344 <DMA_CheckFifoParam+0xe8>
      break;
 800132e:	bf00      	nop
 8001330:	e008      	b.n	8001344 <DMA_CheckFifoParam+0xe8>
      break;
 8001332:	bf00      	nop
 8001334:	e006      	b.n	8001344 <DMA_CheckFifoParam+0xe8>
      break;
 8001336:	bf00      	nop
 8001338:	e004      	b.n	8001344 <DMA_CheckFifoParam+0xe8>
      break;
 800133a:	bf00      	nop
 800133c:	e002      	b.n	8001344 <DMA_CheckFifoParam+0xe8>
      break;   
 800133e:	bf00      	nop
 8001340:	e000      	b.n	8001344 <DMA_CheckFifoParam+0xe8>
      break;
 8001342:	bf00      	nop
    }
  } 
  
  return status; 
 8001344:	7bfb      	ldrb	r3, [r7, #15]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	e159      	b.n	8001624 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	429a      	cmp	r2, r3
 800138a:	f040 8148 	bne.w	800161e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b01      	cmp	r3, #1
 8001398:	d005      	beq.n	80013a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d130      	bne.n	8001408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013dc:	2201      	movs	r2, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f003 0201 	and.w	r2, r3, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b03      	cmp	r3, #3
 8001412:	d017      	beq.n	8001444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d123      	bne.n	8001498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	08da      	lsrs	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3208      	adds	r2, #8
 8001458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	08da      	lsrs	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3208      	adds	r2, #8
 8001492:	69b9      	ldr	r1, [r7, #24]
 8001494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0203 	and.w	r2, r3, #3
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80a2 	beq.w	800161e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b57      	ldr	r3, [pc, #348]	; (800163c <HAL_GPIO_Init+0x2e8>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a56      	ldr	r2, [pc, #344]	; (800163c <HAL_GPIO_Init+0x2e8>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b54      	ldr	r3, [pc, #336]	; (800163c <HAL_GPIO_Init+0x2e8>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f6:	4a52      	ldr	r2, [pc, #328]	; (8001640 <HAL_GPIO_Init+0x2ec>)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a49      	ldr	r2, [pc, #292]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x202>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a48      	ldr	r2, [pc, #288]	; (8001648 <HAL_GPIO_Init+0x2f4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x1fe>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a47      	ldr	r2, [pc, #284]	; (800164c <HAL_GPIO_Init+0x2f8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x1fa>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a46      	ldr	r2, [pc, #280]	; (8001650 <HAL_GPIO_Init+0x2fc>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x1f6>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a45      	ldr	r2, [pc, #276]	; (8001654 <HAL_GPIO_Init+0x300>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x1f2>
 8001542:	2304      	movs	r3, #4
 8001544:	e008      	b.n	8001558 <HAL_GPIO_Init+0x204>
 8001546:	2307      	movs	r3, #7
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x204>
 800154a:	2303      	movs	r3, #3
 800154c:	e004      	b.n	8001558 <HAL_GPIO_Init+0x204>
 800154e:	2302      	movs	r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x204>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x204>
 8001556:	2300      	movs	r3, #0
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	f002 0203 	and.w	r2, r2, #3
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4093      	lsls	r3, r2
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001568:	4935      	ldr	r1, [pc, #212]	; (8001640 <HAL_GPIO_Init+0x2ec>)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <HAL_GPIO_Init+0x304>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800159a:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <HAL_GPIO_Init+0x304>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a0:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <HAL_GPIO_Init+0x304>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c4:	4a24      	ldr	r2, [pc, #144]	; (8001658 <HAL_GPIO_Init+0x304>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <HAL_GPIO_Init+0x304>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ee:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <HAL_GPIO_Init+0x304>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_GPIO_Init+0x304>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_GPIO_Init+0x304>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3301      	adds	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	2b0f      	cmp	r3, #15
 8001628:	f67f aea2 	bls.w	8001370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40013800 	.word	0x40013800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	40020800 	.word	0x40020800
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40021000 	.word	0x40021000
 8001658:	40013c00 	.word	0x40013c00

0800165c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_RCC_GetHCLKFreq+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000000 	.word	0x20000000

08001674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001678:	f7ff fff0 	bl	800165c <HAL_RCC_GetHCLKFreq>
 800167c:	4602      	mov	r2, r0
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	0a9b      	lsrs	r3, r3, #10
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	4903      	ldr	r1, [pc, #12]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800168a:	5ccb      	ldrb	r3, [r1, r3]
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800
 8001698:	08002948 	.word	0x08002948

0800169c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016a0:	f7ff ffdc 	bl	800165c <HAL_RCC_GetHCLKFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	0b5b      	lsrs	r3, r3, #13
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4903      	ldr	r1, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	08002948 	.word	0x08002948

080016c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e03f      	b.n	8001756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7fe ffa6 	bl	800063c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fe73 	bl	80023f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800171c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800172c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800173c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2220      	movs	r2, #32
 8001748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b20      	cmp	r3, #32
 8001776:	d11d      	bne.n	80017b4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <HAL_UART_Receive_DMA+0x26>
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e016      	b.n	80017b6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_UART_Receive_DMA+0x38>
 8001792:	2302      	movs	r3, #2
 8001794:	e00f      	b.n	80017b6 <HAL_UART_Receive_DMA+0x58>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 fbc2 	bl	8001f34 <UART_Start_Receive_DMA>
 80017b0:	4603      	mov	r3, r0
 80017b2:	e000      	b.n	80017b6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80017b4:	2302      	movs	r3, #2
  }
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0ba      	sub	sp, #232	; 0xe8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80017f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80017fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10f      	bne.n	8001826 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800180a:	f003 0320 	and.w	r3, r3, #32
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_UART_IRQHandler+0x66>
 8001812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fd2d 	bl	800227e <UART_Receive_IT>
      return;
 8001824:	e256      	b.n	8001cd4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80de 	beq.w	80019ec <HAL_UART_IRQHandler+0x22c>
 8001830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800183c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001840:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80d1 	beq.w	80019ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800184a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_UART_IRQHandler+0xae>
 8001856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f043 0201 	orr.w	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800186e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_UART_IRQHandler+0xd2>
 800187a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f043 0202 	orr.w	r2, r3, #2
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <HAL_UART_IRQHandler+0xf6>
 800189e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f043 0204 	orr.w	r2, r3, #4
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80018b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d011      	beq.n	80018e6 <HAL_UART_IRQHandler+0x126>
 80018c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d105      	bne.n	80018da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80018ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f043 0208 	orr.w	r2, r3, #8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 81ed 	beq.w	8001cca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_UART_IRQHandler+0x14e>
 80018fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fcb8 	bl	800227e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001918:	2b40      	cmp	r3, #64	; 0x40
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <HAL_UART_IRQHandler+0x17a>
 8001932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001936:	2b00      	cmp	r3, #0
 8001938:	d04f      	beq.n	80019da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 fbc0 	bl	80020c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194a:	2b40      	cmp	r3, #64	; 0x40
 800194c:	d141      	bne.n	80019d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3314      	adds	r3, #20
 8001954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800195c:	e853 3f00 	ldrex	r3, [r3]
 8001960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800196c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3314      	adds	r3, #20
 8001976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800197a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800197e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800198a:	e841 2300 	strex	r3, r2, [r1]
 800198e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1d9      	bne.n	800194e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d013      	beq.n	80019ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a6:	4a7d      	ldr	r2, [pc, #500]	; (8001b9c <HAL_UART_IRQHandler+0x3dc>)
 80019a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fa44 	bl	8000e3c <HAL_DMA_Abort_IT>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d016      	beq.n	80019e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019c4:	4610      	mov	r0, r2
 80019c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019c8:	e00e      	b.n	80019e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f9a4 	bl	8001d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019d0:	e00a      	b.n	80019e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f9a0 	bl	8001d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019d8:	e006      	b.n	80019e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f99c 	bl	8001d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80019e6:	e170      	b.n	8001cca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019e8:	bf00      	nop
    return;
 80019ea:	e16e      	b.n	8001cca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	f040 814a 	bne.w	8001c8a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80019f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8143 	beq.w	8001c8a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 813c 	beq.w	8001c8a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a32:	2b40      	cmp	r3, #64	; 0x40
 8001a34:	f040 80b4 	bne.w	8001ba0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001a44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 8140 	beq.w	8001cce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001a56:	429a      	cmp	r2, r3
 8001a58:	f080 8139 	bcs.w	8001cce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001a62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a6e:	f000 8088 	beq.w	8001b82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	330c      	adds	r3, #12
 8001a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a80:	e853 3f00 	ldrex	r3, [r3]
 8001a84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	330c      	adds	r3, #12
 8001a9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001a9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001aaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001aae:	e841 2300 	strex	r3, r2, [r1]
 8001ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1d9      	bne.n	8001a72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3314      	adds	r3, #20
 8001ac4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ac8:	e853 3f00 	ldrex	r3, [r3]
 8001acc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3314      	adds	r3, #20
 8001ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ae2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001aea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001aee:	e841 2300 	strex	r3, r2, [r1]
 8001af2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1e1      	bne.n	8001abe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3314      	adds	r3, #20
 8001b00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b04:	e853 3f00 	ldrex	r3, [r3]
 8001b08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3314      	adds	r3, #20
 8001b1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001b1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b26:	e841 2300 	strex	r3, r2, [r1]
 8001b2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1e3      	bne.n	8001afa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	330c      	adds	r3, #12
 8001b46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4a:	e853 3f00 	ldrex	r3, [r3]
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b52:	f023 0310 	bic.w	r3, r3, #16
 8001b56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	330c      	adds	r3, #12
 8001b60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001b64:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b6c:	e841 2300 	strex	r3, r2, [r1]
 8001b70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e3      	bne.n	8001b40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f8ed 	bl	8000d5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4619      	mov	r1, r3
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8ca 	bl	8001d2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001b98:	e099      	b.n	8001cce <HAL_UART_IRQHandler+0x50e>
 8001b9a:	bf00      	nop
 8001b9c:	08002187 	.word	0x08002187
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 808b 	beq.w	8001cd2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001bbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8086 	beq.w	8001cd2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	330c      	adds	r3, #12
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd0:	e853 3f00 	ldrex	r3, [r3]
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001bdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	330c      	adds	r3, #12
 8001be6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001bea:	647a      	str	r2, [r7, #68]	; 0x44
 8001bec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001bf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bf2:	e841 2300 	strex	r3, r2, [r1]
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1e3      	bne.n	8001bc6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3314      	adds	r3, #20
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	e853 3f00 	ldrex	r3, [r3]
 8001c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3314      	adds	r3, #20
 8001c1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c22:	633a      	str	r2, [r7, #48]	; 0x30
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c2a:	e841 2300 	strex	r3, r2, [r1]
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1e3      	bne.n	8001bfe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	330c      	adds	r3, #12
 8001c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	e853 3f00 	ldrex	r3, [r3]
 8001c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f023 0310 	bic.w	r3, r3, #16
 8001c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	330c      	adds	r3, #12
 8001c64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001c68:	61fa      	str	r2, [r7, #28]
 8001c6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c6c:	69b9      	ldr	r1, [r7, #24]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	e841 2300 	strex	r3, r2, [r1]
 8001c74:	617b      	str	r3, [r7, #20]
   return(result);
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1e3      	bne.n	8001c44 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001c80:	4619      	mov	r1, r3
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f852 	bl	8001d2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001c88:	e023      	b.n	8001cd2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <HAL_UART_IRQHandler+0x4ea>
 8001c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fa83 	bl	80021ae <UART_Transmit_IT>
    return;
 8001ca8:	e014      	b.n	8001cd4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00e      	beq.n	8001cd4 <HAL_UART_IRQHandler+0x514>
 8001cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fac3 	bl	800224e <UART_EndTransmit_IT>
    return;
 8001cc8:	e004      	b.n	8001cd4 <HAL_UART_IRQHandler+0x514>
    return;
 8001cca:	bf00      	nop
 8001ccc:	e002      	b.n	8001cd4 <HAL_UART_IRQHandler+0x514>
      return;
 8001cce:	bf00      	nop
 8001cd0:	e000      	b.n	8001cd4 <HAL_UART_IRQHandler+0x514>
      return;
 8001cd2:	bf00      	nop
  }
}
 8001cd4:	37e8      	adds	r7, #232	; 0xe8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop

08001cdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b09c      	sub	sp, #112	; 0x70
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d50:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d172      	bne.n	8001e46 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8001d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d62:	2200      	movs	r2, #0
 8001d64:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	330c      	adds	r3, #12
 8001d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d70:	e853 3f00 	ldrex	r3, [r3]
 8001d74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	330c      	adds	r3, #12
 8001d84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d86:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d88:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d8e:	e841 2300 	strex	r3, r2, [r1]
 8001d92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1e5      	bne.n	8001d66 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3314      	adds	r3, #20
 8001da0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da4:	e853 3f00 	ldrex	r3, [r3]
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	667b      	str	r3, [r7, #100]	; 0x64
 8001db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3314      	adds	r3, #20
 8001db8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001dba:	647a      	str	r2, [r7, #68]	; 0x44
 8001dbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001dc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dc2:	e841 2300 	strex	r3, r2, [r1]
 8001dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1e5      	bne.n	8001d9a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3314      	adds	r3, #20
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	e853 3f00 	ldrex	r3, [r3]
 8001ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001de4:	663b      	str	r3, [r7, #96]	; 0x60
 8001de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3314      	adds	r3, #20
 8001dec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dee:	633a      	str	r2, [r7, #48]	; 0x30
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001df6:	e841 2300 	strex	r3, r2, [r1]
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1e5      	bne.n	8001dce <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d119      	bne.n	8001e46 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	330c      	adds	r3, #12
 8001e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	e853 3f00 	ldrex	r3, [r3]
 8001e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f023 0310 	bic.w	r3, r3, #16
 8001e28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	330c      	adds	r3, #12
 8001e30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e32:	61fa      	str	r2, [r7, #28]
 8001e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e36:	69b9      	ldr	r1, [r7, #24]
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	e841 2300 	strex	r3, r2, [r1]
 8001e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1e5      	bne.n	8001e12 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d106      	bne.n	8001e5c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e52:	4619      	mov	r1, r3
 8001e54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e56:	f7ff ff69 	bl	8001d2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001e5a:	e002      	b.n	8001e62 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8001e5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e5e:	f7ff ff47 	bl	8001cf0 <HAL_UART_RxCpltCallback>
}
 8001e62:	bf00      	nop
 8001e64:	3770      	adds	r7, #112	; 0x70
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d108      	bne.n	8001e92 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4619      	mov	r1, r3
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7ff ff4e 	bl	8001d2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001e90:	e002      	b.n	8001e98 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff ff36 	bl	8001d04 <HAL_UART_RxHalfCpltCallback>
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebc:	2b80      	cmp	r3, #128	; 0x80
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b21      	cmp	r3, #33	; 0x21
 8001ed2:	d108      	bne.n	8001ee6 <UART_DMAError+0x46>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2200      	movs	r2, #0
 8001ede:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f000 f8c5 	bl	8002070 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b40      	cmp	r3, #64	; 0x40
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b22      	cmp	r3, #34	; 0x22
 8001f06:	d108      	bne.n	8001f1a <UART_DMAError+0x7a>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2200      	movs	r2, #0
 8001f12:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001f14:	68b8      	ldr	r0, [r7, #8]
 8001f16:	f000 f8d3 	bl	80020c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f043 0210 	orr.w	r2, r3, #16
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f26:	68b8      	ldr	r0, [r7, #8]
 8001f28:	f7ff fef6 	bl	8001d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b098      	sub	sp, #96	; 0x60
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	88fa      	ldrh	r2, [r7, #6]
 8001f4c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2222      	movs	r2, #34	; 0x22
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	4a40      	ldr	r2, [pc, #256]	; (8002064 <UART_Start_Receive_DMA+0x130>)
 8001f62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f68:	4a3f      	ldr	r2, [pc, #252]	; (8002068 <UART_Start_Receive_DMA+0x134>)
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	4a3e      	ldr	r2, [pc, #248]	; (800206c <UART_Start_Receive_DMA+0x138>)
 8001f72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	2200      	movs	r2, #0
 8001f7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	f7fe fe8a 	bl	8000cac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d019      	beq.n	8001ff2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	330c      	adds	r3, #12
 8001fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc8:	e853 3f00 	ldrex	r3, [r3]
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fde:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001fe0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fe6:	e841 2300 	strex	r3, r2, [r1]
 8001fea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8001fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1e5      	bne.n	8001fbe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3314      	adds	r3, #20
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	e853 3f00 	ldrex	r3, [r3]
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	657b      	str	r3, [r7, #84]	; 0x54
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3314      	adds	r3, #20
 8002010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002012:	63ba      	str	r2, [r7, #56]	; 0x38
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002016:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800201a:	e841 2300 	strex	r3, r2, [r1]
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1e5      	bne.n	8001ff2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3314      	adds	r3, #20
 800202c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	e853 3f00 	ldrex	r3, [r3]
 8002034:	617b      	str	r3, [r7, #20]
   return(result);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800203c:	653b      	str	r3, [r7, #80]	; 0x50
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3314      	adds	r3, #20
 8002044:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002046:	627a      	str	r2, [r7, #36]	; 0x24
 8002048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800204a:	6a39      	ldr	r1, [r7, #32]
 800204c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204e:	e841 2300 	strex	r3, r2, [r1]
 8002052:	61fb      	str	r3, [r7, #28]
   return(result);
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e5      	bne.n	8002026 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3760      	adds	r7, #96	; 0x60
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	08001d45 	.word	0x08001d45
 8002068:	08001e6b 	.word	0x08001e6b
 800206c:	08001ea1 	.word	0x08001ea1

08002070 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	330c      	adds	r3, #12
 800207e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	e853 3f00 	ldrex	r3, [r3]
 8002086:	60bb      	str	r3, [r7, #8]
   return(result);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	61ba      	str	r2, [r7, #24]
 800209a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209c:	6979      	ldr	r1, [r7, #20]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	e841 2300 	strex	r3, r2, [r1]
 80020a4:	613b      	str	r3, [r7, #16]
   return(result);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e5      	bne.n	8002078 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80020b4:	bf00      	nop
 80020b6:	3724      	adds	r7, #36	; 0x24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b095      	sub	sp, #84	; 0x54
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	330c      	adds	r3, #12
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d2:	e853 3f00 	ldrex	r3, [r3]
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80020de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	330c      	adds	r3, #12
 80020e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020e8:	643a      	str	r2, [r7, #64]	; 0x40
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020f0:	e841 2300 	strex	r3, r2, [r1]
 80020f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80020f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e5      	bne.n	80020c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3314      	adds	r3, #20
 8002102:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	e853 3f00 	ldrex	r3, [r3]
 800210a:	61fb      	str	r3, [r7, #28]
   return(result);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3314      	adds	r3, #20
 800211a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800211c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002124:	e841 2300 	strex	r3, r2, [r1]
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1e5      	bne.n	80020fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	2b01      	cmp	r3, #1
 8002136:	d119      	bne.n	800216c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	330c      	adds	r3, #12
 800213e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	e853 3f00 	ldrex	r3, [r3]
 8002146:	60bb      	str	r3, [r7, #8]
   return(result);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f023 0310 	bic.w	r3, r3, #16
 800214e:	647b      	str	r3, [r7, #68]	; 0x44
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	330c      	adds	r3, #12
 8002156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002158:	61ba      	str	r2, [r7, #24]
 800215a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215c:	6979      	ldr	r1, [r7, #20]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	e841 2300 	strex	r3, r2, [r1]
 8002164:	613b      	str	r3, [r7, #16]
   return(result);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e5      	bne.n	8002138 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
}
 800217a:	bf00      	nop
 800217c:	3754      	adds	r7, #84	; 0x54
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002192:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7ff fdb9 	bl	8001d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b21      	cmp	r3, #33	; 0x21
 80021c0:	d13e      	bne.n	8002240 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ca:	d114      	bne.n	80021f6 <UART_Transmit_IT+0x48>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d110      	bne.n	80021f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	1c9a      	adds	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	621a      	str	r2, [r3, #32]
 80021f4:	e008      	b.n	8002208 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	1c59      	adds	r1, r3, #1
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6211      	str	r1, [r2, #32]
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29b      	uxth	r3, r3
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4619      	mov	r1, r3
 8002216:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10f      	bne.n	800223c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800222a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800223a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	e000      	b.n	8002242 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002240:	2302      	movs	r3, #2
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002264:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fd34 	bl	8001cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b08c      	sub	sp, #48	; 0x30
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b22      	cmp	r3, #34	; 0x22
 8002290:	f040 80ab 	bne.w	80023ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800229c:	d117      	bne.n	80022ce <UART_Receive_IT+0x50>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d113      	bne.n	80022ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022bc:	b29a      	uxth	r2, r3
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	1c9a      	adds	r2, r3, #2
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28
 80022cc:	e026      	b.n	800231c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e0:	d007      	beq.n	80022f2 <UART_Receive_IT+0x74>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10a      	bne.n	8002300 <UART_Receive_IT+0x82>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	e008      	b.n	8002312 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800230c:	b2da      	uxtb	r2, r3
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29b      	uxth	r3, r3
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4619      	mov	r1, r3
 800232a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800232c:	2b00      	cmp	r3, #0
 800232e:	d15a      	bne.n	80023e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0220 	bic.w	r2, r2, #32
 800233e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800234e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	2b01      	cmp	r3, #1
 800236e:	d135      	bne.n	80023dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	330c      	adds	r3, #12
 800237c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	e853 3f00 	ldrex	r3, [r3]
 8002384:	613b      	str	r3, [r7, #16]
   return(result);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f023 0310 	bic.w	r3, r3, #16
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	330c      	adds	r3, #12
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	623a      	str	r2, [r7, #32]
 8002398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239a:	69f9      	ldr	r1, [r7, #28]
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	e841 2300 	strex	r3, r2, [r1]
 80023a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1e5      	bne.n	8002376 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d10a      	bne.n	80023ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff fca9 	bl	8001d2c <HAL_UARTEx_RxEventCallback>
 80023da:	e002      	b.n	80023e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff fc87 	bl	8001cf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e002      	b.n	80023ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
  }
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3730      	adds	r7, #48	; 0x30
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f8:	b0c0      	sub	sp, #256	; 0x100
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002410:	68d9      	ldr	r1, [r3, #12]
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	ea40 0301 	orr.w	r3, r0, r1
 800241c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800241e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	431a      	orrs	r2, r3
 800242c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	431a      	orrs	r2, r3
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800244c:	f021 010c 	bic.w	r1, r1, #12
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800245a:	430b      	orrs	r3, r1
 800245c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800246a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246e:	6999      	ldr	r1, [r3, #24]
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	ea40 0301 	orr.w	r3, r0, r1
 800247a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b8f      	ldr	r3, [pc, #572]	; (80026c0 <UART_SetConfig+0x2cc>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d005      	beq.n	8002494 <UART_SetConfig+0xa0>
 8002488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b8d      	ldr	r3, [pc, #564]	; (80026c4 <UART_SetConfig+0x2d0>)
 8002490:	429a      	cmp	r2, r3
 8002492:	d104      	bne.n	800249e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002494:	f7ff f902 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8002498:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800249c:	e003      	b.n	80024a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800249e:	f7ff f8e9 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 80024a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b0:	f040 810c 	bne.w	80026cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b8:	2200      	movs	r2, #0
 80024ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024c6:	4622      	mov	r2, r4
 80024c8:	462b      	mov	r3, r5
 80024ca:	1891      	adds	r1, r2, r2
 80024cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80024ce:	415b      	adcs	r3, r3
 80024d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024d6:	4621      	mov	r1, r4
 80024d8:	eb12 0801 	adds.w	r8, r2, r1
 80024dc:	4629      	mov	r1, r5
 80024de:	eb43 0901 	adc.w	r9, r3, r1
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f6:	4690      	mov	r8, r2
 80024f8:	4699      	mov	r9, r3
 80024fa:	4623      	mov	r3, r4
 80024fc:	eb18 0303 	adds.w	r3, r8, r3
 8002500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002504:	462b      	mov	r3, r5
 8002506:	eb49 0303 	adc.w	r3, r9, r3
 800250a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800250e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800251a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800251e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002522:	460b      	mov	r3, r1
 8002524:	18db      	adds	r3, r3, r3
 8002526:	653b      	str	r3, [r7, #80]	; 0x50
 8002528:	4613      	mov	r3, r2
 800252a:	eb42 0303 	adc.w	r3, r2, r3
 800252e:	657b      	str	r3, [r7, #84]	; 0x54
 8002530:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002534:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002538:	f7fd fe4e 	bl	80001d8 <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <UART_SetConfig+0x2d4>)
 8002542:	fba3 2302 	umull	r2, r3, r3, r2
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	011c      	lsls	r4, r3, #4
 800254a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800254e:	2200      	movs	r2, #0
 8002550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002554:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002558:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800255c:	4642      	mov	r2, r8
 800255e:	464b      	mov	r3, r9
 8002560:	1891      	adds	r1, r2, r2
 8002562:	64b9      	str	r1, [r7, #72]	; 0x48
 8002564:	415b      	adcs	r3, r3
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002568:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800256c:	4641      	mov	r1, r8
 800256e:	eb12 0a01 	adds.w	sl, r2, r1
 8002572:	4649      	mov	r1, r9
 8002574:	eb43 0b01 	adc.w	fp, r3, r1
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002584:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800258c:	4692      	mov	sl, r2
 800258e:	469b      	mov	fp, r3
 8002590:	4643      	mov	r3, r8
 8002592:	eb1a 0303 	adds.w	r3, sl, r3
 8002596:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800259a:	464b      	mov	r3, r9
 800259c:	eb4b 0303 	adc.w	r3, fp, r3
 80025a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025b8:	460b      	mov	r3, r1
 80025ba:	18db      	adds	r3, r3, r3
 80025bc:	643b      	str	r3, [r7, #64]	; 0x40
 80025be:	4613      	mov	r3, r2
 80025c0:	eb42 0303 	adc.w	r3, r2, r3
 80025c4:	647b      	str	r3, [r7, #68]	; 0x44
 80025c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025ce:	f7fd fe03 	bl	80001d8 <__aeabi_uldivmod>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <UART_SetConfig+0x2d4>)
 80025da:	fba3 2301 	umull	r2, r3, r3, r1
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2264      	movs	r2, #100	; 0x64
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	1acb      	subs	r3, r1, r3
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025ee:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <UART_SetConfig+0x2d4>)
 80025f0:	fba3 2302 	umull	r2, r3, r3, r2
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025fc:	441c      	add	r4, r3
 80025fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002602:	2200      	movs	r2, #0
 8002604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002608:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800260c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	1891      	adds	r1, r2, r2
 8002616:	63b9      	str	r1, [r7, #56]	; 0x38
 8002618:	415b      	adcs	r3, r3
 800261a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800261c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002620:	4641      	mov	r1, r8
 8002622:	1851      	adds	r1, r2, r1
 8002624:	6339      	str	r1, [r7, #48]	; 0x30
 8002626:	4649      	mov	r1, r9
 8002628:	414b      	adcs	r3, r1
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002638:	4659      	mov	r1, fp
 800263a:	00cb      	lsls	r3, r1, #3
 800263c:	4651      	mov	r1, sl
 800263e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002642:	4651      	mov	r1, sl
 8002644:	00ca      	lsls	r2, r1, #3
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	4603      	mov	r3, r0
 800264c:	4642      	mov	r2, r8
 800264e:	189b      	adds	r3, r3, r2
 8002650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002654:	464b      	mov	r3, r9
 8002656:	460a      	mov	r2, r1
 8002658:	eb42 0303 	adc.w	r3, r2, r3
 800265c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800266c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002670:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002674:	460b      	mov	r3, r1
 8002676:	18db      	adds	r3, r3, r3
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
 800267a:	4613      	mov	r3, r2
 800267c:	eb42 0303 	adc.w	r3, r2, r3
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002682:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002686:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800268a:	f7fd fda5 	bl	80001d8 <__aeabi_uldivmod>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <UART_SetConfig+0x2d4>)
 8002694:	fba3 1302 	umull	r1, r3, r3, r2
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	2164      	movs	r1, #100	; 0x64
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	3332      	adds	r3, #50	; 0x32
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <UART_SetConfig+0x2d4>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	f003 0207 	and.w	r2, r3, #7
 80026b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4422      	add	r2, r4
 80026ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026bc:	e105      	b.n	80028ca <UART_SetConfig+0x4d6>
 80026be:	bf00      	nop
 80026c0:	40011000 	.word	0x40011000
 80026c4:	40011400 	.word	0x40011400
 80026c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d0:	2200      	movs	r2, #0
 80026d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026de:	4642      	mov	r2, r8
 80026e0:	464b      	mov	r3, r9
 80026e2:	1891      	adds	r1, r2, r2
 80026e4:	6239      	str	r1, [r7, #32]
 80026e6:	415b      	adcs	r3, r3
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ee:	4641      	mov	r1, r8
 80026f0:	1854      	adds	r4, r2, r1
 80026f2:	4649      	mov	r1, r9
 80026f4:	eb43 0501 	adc.w	r5, r3, r1
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	00eb      	lsls	r3, r5, #3
 8002702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002706:	00e2      	lsls	r2, r4, #3
 8002708:	4614      	mov	r4, r2
 800270a:	461d      	mov	r5, r3
 800270c:	4643      	mov	r3, r8
 800270e:	18e3      	adds	r3, r4, r3
 8002710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002714:	464b      	mov	r3, r9
 8002716:	eb45 0303 	adc.w	r3, r5, r3
 800271a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800272a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800273a:	4629      	mov	r1, r5
 800273c:	008b      	lsls	r3, r1, #2
 800273e:	4621      	mov	r1, r4
 8002740:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002744:	4621      	mov	r1, r4
 8002746:	008a      	lsls	r2, r1, #2
 8002748:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800274c:	f7fd fd44 	bl	80001d8 <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4b60      	ldr	r3, [pc, #384]	; (80028d8 <UART_SetConfig+0x4e4>)
 8002756:	fba3 2302 	umull	r2, r3, r3, r2
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	011c      	lsls	r4, r3, #4
 800275e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002762:	2200      	movs	r2, #0
 8002764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002768:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800276c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002770:	4642      	mov	r2, r8
 8002772:	464b      	mov	r3, r9
 8002774:	1891      	adds	r1, r2, r2
 8002776:	61b9      	str	r1, [r7, #24]
 8002778:	415b      	adcs	r3, r3
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002780:	4641      	mov	r1, r8
 8002782:	1851      	adds	r1, r2, r1
 8002784:	6139      	str	r1, [r7, #16]
 8002786:	4649      	mov	r1, r9
 8002788:	414b      	adcs	r3, r1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002798:	4659      	mov	r1, fp
 800279a:	00cb      	lsls	r3, r1, #3
 800279c:	4651      	mov	r1, sl
 800279e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a2:	4651      	mov	r1, sl
 80027a4:	00ca      	lsls	r2, r1, #3
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	4642      	mov	r2, r8
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027b4:	464b      	mov	r3, r9
 80027b6:	460a      	mov	r2, r1
 80027b8:	eb42 0303 	adc.w	r3, r2, r3
 80027bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80027ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027d8:	4649      	mov	r1, r9
 80027da:	008b      	lsls	r3, r1, #2
 80027dc:	4641      	mov	r1, r8
 80027de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027e2:	4641      	mov	r1, r8
 80027e4:	008a      	lsls	r2, r1, #2
 80027e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027ea:	f7fd fcf5 	bl	80001d8 <__aeabi_uldivmod>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <UART_SetConfig+0x4e4>)
 80027f4:	fba3 1302 	umull	r1, r3, r3, r2
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	2164      	movs	r1, #100	; 0x64
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	3332      	adds	r3, #50	; 0x32
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <UART_SetConfig+0x4e4>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002812:	441c      	add	r4, r3
 8002814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002818:	2200      	movs	r2, #0
 800281a:	673b      	str	r3, [r7, #112]	; 0x70
 800281c:	677a      	str	r2, [r7, #116]	; 0x74
 800281e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002822:	4642      	mov	r2, r8
 8002824:	464b      	mov	r3, r9
 8002826:	1891      	adds	r1, r2, r2
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	415b      	adcs	r3, r3
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002832:	4641      	mov	r1, r8
 8002834:	1851      	adds	r1, r2, r1
 8002836:	6039      	str	r1, [r7, #0]
 8002838:	4649      	mov	r1, r9
 800283a:	414b      	adcs	r3, r1
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800284a:	4659      	mov	r1, fp
 800284c:	00cb      	lsls	r3, r1, #3
 800284e:	4651      	mov	r1, sl
 8002850:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002854:	4651      	mov	r1, sl
 8002856:	00ca      	lsls	r2, r1, #3
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	4603      	mov	r3, r0
 800285e:	4642      	mov	r2, r8
 8002860:	189b      	adds	r3, r3, r2
 8002862:	66bb      	str	r3, [r7, #104]	; 0x68
 8002864:	464b      	mov	r3, r9
 8002866:	460a      	mov	r2, r1
 8002868:	eb42 0303 	adc.w	r3, r2, r3
 800286c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	663b      	str	r3, [r7, #96]	; 0x60
 8002878:	667a      	str	r2, [r7, #100]	; 0x64
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002886:	4649      	mov	r1, r9
 8002888:	008b      	lsls	r3, r1, #2
 800288a:	4641      	mov	r1, r8
 800288c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002890:	4641      	mov	r1, r8
 8002892:	008a      	lsls	r2, r1, #2
 8002894:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002898:	f7fd fc9e 	bl	80001d8 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <UART_SetConfig+0x4e4>)
 80028a2:	fba3 1302 	umull	r1, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2164      	movs	r1, #100	; 0x64
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	3332      	adds	r3, #50	; 0x32
 80028b4:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <UART_SetConfig+0x4e4>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	f003 020f 	and.w	r2, r3, #15
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4422      	add	r2, r4
 80028c8:	609a      	str	r2, [r3, #8]
}
 80028ca:	bf00      	nop
 80028cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028d0:	46bd      	mov	sp, r7
 80028d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d6:	bf00      	nop
 80028d8:	51eb851f 	.word	0x51eb851f

080028dc <__libc_init_array>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	4d0d      	ldr	r5, [pc, #52]	; (8002914 <__libc_init_array+0x38>)
 80028e0:	4c0d      	ldr	r4, [pc, #52]	; (8002918 <__libc_init_array+0x3c>)
 80028e2:	1b64      	subs	r4, r4, r5
 80028e4:	10a4      	asrs	r4, r4, #2
 80028e6:	2600      	movs	r6, #0
 80028e8:	42a6      	cmp	r6, r4
 80028ea:	d109      	bne.n	8002900 <__libc_init_array+0x24>
 80028ec:	4d0b      	ldr	r5, [pc, #44]	; (800291c <__libc_init_array+0x40>)
 80028ee:	4c0c      	ldr	r4, [pc, #48]	; (8002920 <__libc_init_array+0x44>)
 80028f0:	f000 f818 	bl	8002924 <_init>
 80028f4:	1b64      	subs	r4, r4, r5
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	2600      	movs	r6, #0
 80028fa:	42a6      	cmp	r6, r4
 80028fc:	d105      	bne.n	800290a <__libc_init_array+0x2e>
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	f855 3b04 	ldr.w	r3, [r5], #4
 8002904:	4798      	blx	r3
 8002906:	3601      	adds	r6, #1
 8002908:	e7ee      	b.n	80028e8 <__libc_init_array+0xc>
 800290a:	f855 3b04 	ldr.w	r3, [r5], #4
 800290e:	4798      	blx	r3
 8002910:	3601      	adds	r6, #1
 8002912:	e7f2      	b.n	80028fa <__libc_init_array+0x1e>
 8002914:	08002960 	.word	0x08002960
 8002918:	08002960 	.word	0x08002960
 800291c:	08002960 	.word	0x08002960
 8002920:	08002964 	.word	0x08002964

08002924 <_init>:
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002926:	bf00      	nop
 8002928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292a:	bc08      	pop	{r3}
 800292c:	469e      	mov	lr, r3
 800292e:	4770      	bx	lr

08002930 <_fini>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr
 800293c:	0000      	movs	r0, r0
	...

08002940 <__update_fw_veneer>:
 8002940:	f85f f000 	ldr.w	pc, [pc]	; 8002944 <__update_fw_veneer+0x4>
 8002944:	20000155 	.word	0x20000155

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000010                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <flash_erase>:
{
2000000c:	b480      	push	{r7}
2000000e:	b087      	sub	sp, #28
20000010:	af00      	add	r7, sp, #0
20000012:	4603      	mov	r3, r0
20000014:	71fb      	strb	r3, [r7, #7]
	uint32_t* SR=(uint32_t*)0x40023c0c;      //Status register
20000016:	4b20      	ldr	r3, [pc, #128]	; (20000098 <flash_erase+0x8c>)
20000018:	617b      	str	r3, [r7, #20]
	uint32_t* CR=(uint32_t*)0x40023c10;      //Control register
2000001a:	4b20      	ldr	r3, [pc, #128]	; (2000009c <flash_erase+0x90>)
2000001c:	613b      	str	r3, [r7, #16]
	uint32_t* KEYR=(uint32_t*)0x40023c04;    //Flash key register
2000001e:	4b20      	ldr	r3, [pc, #128]	; (200000a0 <flash_erase+0x94>)
20000020:	60fb      	str	r3, [r7, #12]
    if(((*CR>>31)&1)==1) //check lock ->if CR is locked -> write 0x45 to unclock
20000022:	693b      	ldr	r3, [r7, #16]
20000024:	681b      	ldr	r3, [r3, #0]
20000026:	0fdb      	lsrs	r3, r3, #31
20000028:	2b01      	cmp	r3, #1
2000002a:	d105      	bne.n	20000038 <flash_erase+0x2c>
			*KEYR=0x45670123;
2000002c:	68fb      	ldr	r3, [r7, #12]
2000002e:	4a1d      	ldr	r2, [pc, #116]	; (200000a4 <flash_erase+0x98>)
20000030:	601a      	str	r2, [r3, #0]
			*KEYR=0xCDEF89AB;
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	4a1c      	ldr	r2, [pc, #112]	; (200000a8 <flash_erase+0x9c>)
20000036:	601a      	str	r2, [r3, #0]
	while(((*SR>>16)&1)==1); //check bit busy in SR
20000038:	bf00      	nop
2000003a:	697b      	ldr	r3, [r7, #20]
2000003c:	681b      	ldr	r3, [r3, #0]
2000003e:	0c1b      	lsrs	r3, r3, #16
20000040:	f003 0301 	and.w	r3, r3, #1
20000044:	2b00      	cmp	r3, #0
20000046:	d1f8      	bne.n	2000003a <flash_erase+0x2e>
	*CR |=1<<1;                     //sector erase mode
20000048:	693b      	ldr	r3, [r7, #16]
2000004a:	681b      	ldr	r3, [r3, #0]
2000004c:	f043 0202 	orr.w	r2, r3, #2
20000050:	693b      	ldr	r3, [r7, #16]
20000052:	601a      	str	r2, [r3, #0]
	*CR |=num<<3;                    //num = sector 0-7  start from 0x08000000-(128kbytes)
20000054:	693b      	ldr	r3, [r7, #16]
20000056:	681b      	ldr	r3, [r3, #0]
20000058:	79fa      	ldrb	r2, [r7, #7]
2000005a:	00d2      	lsls	r2, r2, #3
2000005c:	431a      	orrs	r2, r3
2000005e:	693b      	ldr	r3, [r7, #16]
20000060:	601a      	str	r2, [r3, #0]
	*CR |=1<<16;                 //Start
20000062:	693b      	ldr	r3, [r7, #16]
20000064:	681b      	ldr	r3, [r3, #0]
20000066:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
2000006a:	693b      	ldr	r3, [r7, #16]
2000006c:	601a      	str	r2, [r3, #0]
	while(((*SR>>16)&1)==1);     //check bit busy in SR
2000006e:	bf00      	nop
20000070:	697b      	ldr	r3, [r7, #20]
20000072:	681b      	ldr	r3, [r3, #0]
20000074:	0c1b      	lsrs	r3, r3, #16
20000076:	f003 0301 	and.w	r3, r3, #1
2000007a:	2b00      	cmp	r3, #0
2000007c:	d1f8      	bne.n	20000070 <flash_erase+0x64>
	*CR &=~(1<<1);	           //Erase done-> pull to 0
2000007e:	693b      	ldr	r3, [r7, #16]
20000080:	681b      	ldr	r3, [r3, #0]
20000082:	f023 0202 	bic.w	r2, r3, #2
20000086:	693b      	ldr	r3, [r7, #16]
20000088:	601a      	str	r2, [r3, #0]
}
2000008a:	bf00      	nop
2000008c:	371c      	adds	r7, #28
2000008e:	46bd      	mov	sp, r7
20000090:	f85d 7b04 	ldr.w	r7, [sp], #4
20000094:	4770      	bx	lr
20000096:	bf00      	nop
20000098:	40023c0c 	.word	0x40023c0c
2000009c:	40023c10 	.word	0x40023c10
200000a0:	40023c04 	.word	0x40023c04
200000a4:	45670123 	.word	0x45670123
200000a8:	cdef89ab 	.word	0xcdef89ab

200000ac <program_flash_write>:
{
200000ac:	b480      	push	{r7}
200000ae:	b08b      	sub	sp, #44	; 0x2c
200000b0:	af00      	add	r7, sp, #0
200000b2:	60f8      	str	r0, [r7, #12]
200000b4:	60b9      	str	r1, [r7, #8]
200000b6:	607a      	str	r2, [r7, #4]
	uint32_t* SR=(uint32_t*)0x40023c0c;      //Status register
200000b8:	4b21      	ldr	r3, [pc, #132]	; (20000140 <program_flash_write+0x94>)
200000ba:	61fb      	str	r3, [r7, #28]
	uint32_t* CR=(uint32_t*)0x40023c10;      //Control register
200000bc:	4b21      	ldr	r3, [pc, #132]	; (20000144 <program_flash_write+0x98>)
200000be:	61bb      	str	r3, [r7, #24]
	uint32_t* KEYR=(uint32_t*)0x40023c04;
200000c0:	4b21      	ldr	r3, [pc, #132]	; (20000148 <program_flash_write+0x9c>)
200000c2:	617b      	str	r3, [r7, #20]
	if(((*CR>>31)&1)==1)
200000c4:	69bb      	ldr	r3, [r7, #24]
200000c6:	681b      	ldr	r3, [r3, #0]
200000c8:	0fdb      	lsrs	r3, r3, #31
200000ca:	2b01      	cmp	r3, #1
200000cc:	d105      	bne.n	200000da <program_flash_write+0x2e>
				*KEYR=0x45670123;
200000ce:	697b      	ldr	r3, [r7, #20]
200000d0:	4a1e      	ldr	r2, [pc, #120]	; (2000014c <program_flash_write+0xa0>)
200000d2:	601a      	str	r2, [r3, #0]
				*KEYR=0xCDEF89AB;
200000d4:	697b      	ldr	r3, [r7, #20]
200000d6:	4a1e      	ldr	r2, [pc, #120]	; (20000150 <program_flash_write+0xa4>)
200000d8:	601a      	str	r2, [r3, #0]
	while(((*SR>>16)&1)==1);
200000da:	bf00      	nop
200000dc:	69fb      	ldr	r3, [r7, #28]
200000de:	681b      	ldr	r3, [r3, #0]
200000e0:	0c1b      	lsrs	r3, r3, #16
200000e2:	f003 0301 	and.w	r3, r3, #1
200000e6:	2b00      	cmp	r3, #0
200000e8:	d1f8      	bne.n	200000dc <program_flash_write+0x30>
    *CR |=1;//Select program mode
200000ea:	69bb      	ldr	r3, [r7, #24]
200000ec:	681b      	ldr	r3, [r3, #0]
200000ee:	f043 0201 	orr.w	r2, r3, #1
200000f2:	69bb      	ldr	r3, [r7, #24]
200000f4:	601a      	str	r2, [r3, #0]
    uint8_t* flash=(uint8_t*)address;    //creat a pointer, points to memory wanna write data
200000f6:	68fb      	ldr	r3, [r7, #12]
200000f8:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i=0;i<size;i++)
200000fa:	2300      	movs	r3, #0
200000fc:	623b      	str	r3, [r7, #32]
200000fe:	e00b      	b.n	20000118 <program_flash_write+0x6c>
	      *flash=buffer[i]; //write data into flash
20000100:	6a3b      	ldr	r3, [r7, #32]
20000102:	68ba      	ldr	r2, [r7, #8]
20000104:	4413      	add	r3, r2
20000106:	781a      	ldrb	r2, [r3, #0]
20000108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000010a:	701a      	strb	r2, [r3, #0]
	       flash++;
2000010c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000010e:	3301      	adds	r3, #1
20000110:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i=0;i<size;i++)
20000112:	6a3b      	ldr	r3, [r7, #32]
20000114:	3301      	adds	r3, #1
20000116:	623b      	str	r3, [r7, #32]
20000118:	6a3a      	ldr	r2, [r7, #32]
2000011a:	687b      	ldr	r3, [r7, #4]
2000011c:	429a      	cmp	r2, r3
2000011e:	dbef      	blt.n	20000100 <program_flash_write+0x54>
   while(((*SR>>16)&1)==1);
20000120:	bf00      	nop
20000122:	69fb      	ldr	r3, [r7, #28]
20000124:	681b      	ldr	r3, [r3, #0]
20000126:	0c1b      	lsrs	r3, r3, #16
20000128:	f003 0301 	and.w	r3, r3, #1
2000012c:	2b00      	cmp	r3, #0
2000012e:	d1f8      	bne.n	20000122 <program_flash_write+0x76>
}
20000130:	bf00      	nop
20000132:	bf00      	nop
20000134:	372c      	adds	r7, #44	; 0x2c
20000136:	46bd      	mov	sp, r7
20000138:	f85d 7b04 	ldr.w	r7, [sp], #4
2000013c:	4770      	bx	lr
2000013e:	bf00      	nop
20000140:	40023c0c 	.word	0x40023c0c
20000144:	40023c10 	.word	0x40023c10
20000148:	40023c04 	.word	0x40023c04
2000014c:	45670123 	.word	0x45670123
20000150:	cdef89ab 	.word	0xcdef89ab

20000154 <update_fw>:
{
20000154:	b580      	push	{r7, lr}
20000156:	b082      	sub	sp, #8
20000158:	af00      	add	r7, sp, #0
	uint32_t* STCSR=(uint32_t*)0xe000e010;
2000015a:	4b0d      	ldr	r3, [pc, #52]	; (20000190 <update_fw+0x3c>)
2000015c:	607b      	str	r3, [r7, #4]
	*STCSR &=~(1); //reset systemtick before erase
2000015e:	687b      	ldr	r3, [r7, #4]
20000160:	681b      	ldr	r3, [r3, #0]
20000162:	f023 0201 	bic.w	r2, r3, #1
20000166:	687b      	ldr	r3, [r7, #4]
20000168:	601a      	str	r2, [r3, #0]
	flash_erase(SECTION_0); //Alway start section 0 for updating FW
2000016a:	2000      	movs	r0, #0
2000016c:	f7ff ff4e 	bl	2000000c <flash_erase>
	program_flash_write(0x08000000,new_fw,sizeof(new_fw));
20000170:	f640 227c 	movw	r2, #2684	; 0xa7c
20000174:	4907      	ldr	r1, [pc, #28]	; (20000194 <update_fw+0x40>)
20000176:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
2000017a:	f7ff ff97 	bl	200000ac <program_flash_write>
	uint32_t* AIRCR=(uint32_t*)(0XE000ED0C);
2000017e:	4b06      	ldr	r3, [pc, #24]	; (20000198 <update_fw+0x44>)
20000180:	603b      	str	r3, [r7, #0]
	*AIRCR =(0x5fa<<16) | (1<<2); //Reset chip
20000182:	683b      	ldr	r3, [r7, #0]
20000184:	4a05      	ldr	r2, [pc, #20]	; (2000019c <update_fw+0x48>)
20000186:	601a      	str	r2, [r3, #0]
}
20000188:	bf00      	nop
2000018a:	3708      	adds	r7, #8
2000018c:	46bd      	mov	sp, r7
2000018e:	bd80      	pop	{r7, pc}
20000190:	e000e010 	.word	0xe000e010
20000194:	20000260 	.word	0x20000260
20000198:	e000ed0c 	.word	0xe000ed0c
2000019c:	05fa0004 	.word	0x05fa0004
